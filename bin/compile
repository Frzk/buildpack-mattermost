#!/usr/bin/env bash
# usage: bin/compile <build_dir> <cache_dir> <env_dir>

set -o errexit
set -o pipefail

if [ -n "${BUILDPACK_DEBUG}" ]; then
    set -o xtrace
fi

readonly BUILD_DIR="${1:-}"
readonly CACHE_DIR="${2:-}"
readonly ENV_DIR="${3:-}"

readonly BASE_DIR="$( cd -P "$( dirname "${0}" )" && pwd )"
readonly BUILDPACK_DIR="$( readlink -f "${BASE_DIR}/.." )"


source "${BUILDPACK_DIR}/bin/fn.sh"


# # #


function fetch_github_latest_release() {
    readonly repo="${1}"

    local http_code
    local url

    http_code="$( curl \
                  --get \
                  --header "Accept: application/vnd.github.v3+json" \
                  --output "/tmp/latest_release.json" \
                  --write-out "%{http_code}" \
                  "https://api.github.com/repos/${repo}/releases/latest" )"

    if [ "${http_code}" == "200" ]; then
        url=$(cat "$TMP_PATH/latest_release.json" | jq 'if (.assets | length < 2) then .assets[0].browser_download_url else .assets[] | select(.name|test("linux_amd64";"ix")) | .browser_download_url end' | xargs)
        url="${plugin_url%\"}"
        url="${plugin_url#\"}"
    fi

    echo "${url}"
}

function install_github_plugins_list() {
  local location="$1"
  local plugins_list="$2"
  info "Plugins list to install: ${plugins_list}"
  local plugin_url
  for plugin_id in $(echo "$plugins_list" | tr ',' '\n')
  do
    plugin_url=$(fetch_github_latest_release "$plugin_id")
    info "Plugin id to install: ${plugin_id}"
    if [[ -n $plugin_url ]]; then
      install_plugin "$location" "$plugin_url"
    else
      warn "No plugin with id $plugin_id found in Github"
    fi
  done
}


# # #


# Currently, it doesn't seem possible to install somewhere else.
readonly mm_dir="${BUILD_DIR}"

mkdir -p "${mm_dir}" "${BUILD_DIR}/bin" "${CACHE_DIR}/dist/plugins"

PATH="${BUILD_DIR}/bin":"${mm_dir}/bin":"${PATH}"
export PATH


start "Installing Mattermost"

# Version
mm_version="${MATTERMOST_VERSION:-latest}"

if [ "${mm_version}" == "latest" ]; then
    mm_version="$( retrieve_github_latest_release "mattermost" "mattermost" )"
    # Mattermost versioning starts with the letter 'v', we have to remove it:
    mm_version="${mm_version:1}"
fi

if [ -z "${mm_version}" ]; then
    err "Could not retrieve Mattermost version."
    info "You can specify the version by using the MATTERMOST_VERSION environment variable."
    failure
fi

# Edition
mm_edition="${MATTERMOST_EDITION:-}"

info "Using Mattermost ${mm_edition:-"enterprise"} edition version ${mm_version}."

# Mattermost distribution
dist="mattermost"

if [ -n "${mm_edition}" ]; then
    dist="${dist}-${mm_edition}"
fi

dist="${dist}-${mm_version}-linux-amd64.tar.gz"


# # #


readonly cache_file="${CACHE_DIR}/${dist}"

readonly package_url="https://releases.mattermost.com/${mm_version}/${dist}"
readonly checksum_url="${package_url}.sha256"

if [ -f "${cache_file}" ]
then
    info "Found file in cache."
    do_start "Checking validity" \
        && check_cached_file "${cache_file}" "${checksum_url}" \
        && do_finish \
        || ( do_fail \
            && err "File in cache is invalid, it has been removed." )
fi

if [ ! -f "${cache_file}" ]
then
    do_start "Downloading" \
        && download "${package_url}" "${checksum_url}" "${cache_file}" \
        && do_finish \
        || ( do_fail \
            && err "An error occured while downloading. Aborting." \
            && failure )
fi

do_start "Extracting" \
    && tar --extract --file="${cache_file}" --directory="${CACHE_DIR}" \
        2>/dev/null \
    && do_finish \
    || ( do_fail \
        && err "An error occured while extracting the archive. Aborting." \
        && failure )

do_start "Installing" \
    && mv "${CACHE_DIR}/mattermost"/* "${mm_dir}/" \
        2>/dev/null \
    && do_finish \
    || ( do_fail \
        && err "An error occured while installing the files. Aborting." \
        && failure )

success


if [ -n "${MATTERMOST_GITHUB_PLUGINS}" ]; then
    start "Installing GitHub plugins"

    # Loop through a comma separated string:
    for plugin in ${MATTERMOST_GITHUB_PLUGINS//,/ }
    do
        do_start "Installing ${plugin}"

        org="$( cut -d "/" -f 1 <<< "${plugin}" )"
        repo="$( cut -d "/" -f 2 <<< "${plugin}" )"

        info="$( helper::github::retrieve_latest_release_info \
                 "${org}" "${repo}" )"

        version="$( helper::github::retrieve_latest_release_version \
                    "${info}" )"

        echo "${plugin} ${version}" \
            && do_finish
    done

    success
fi

start "Deploying run script"

do_start "Copying script" \
    && cp "${BUILDPACK_DIR}/bin/run.sh" "${mm_dir}/bin/run" \
    && chmod +x "${mm_dir}/bin/run" \
    && do_finish \
    || ( do_fail && failure )

success


start "Deploying postdeploy script"

do_start "Copying script" \
    && cp "${BUILDPACK_DIR}/bin/postdeploy.sh" "${mm_dir}/bin/postdeploy" \
    && chmod +x "${mm_dir}/bin/postdeploy" \
    && do_finish \
    || ( do_fail && failure )

success
