#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
buildpack="$(cd -P "$(dirname "$0")" && pwd)"

source "${buildpack}/common.sh"

if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

MATTERMOST_PATH="$BUILD_DIR/mattermost"
TMP_PATH="$BUILD_DIR/tmp"
mkdir -p "${BUILD_DIR}/bin" "${CACHE_DIR}/dist" "${TMP_PATH}"
export PATH="$BUILD_DIR/bin:$PATH"

STACK="${STACK:-scalingo-18}"

start "Install Mattermost"

if [[ -f "$ENV_DIR/MATTERMOST_VERSION" ]]; then
  MATTERMOST_VERSION=$(cat "$ENV_DIR/MATTERMOST_VERSION")
else
  MATTERMOST_VERSION="5.33.3"
fi

if [[ -f "${ENV_DIR}/MATTERMOST_EDITION" ]]; then
  MATTERMOST_EDITION=$(cat "$ENV_DIR/MATTERMOST_EDITION")
else
  MATTERMOST_EDITION="" # default is enterprise (empty) and otherwise team
fi

start "Fetch Mattermost ${MATTERMOST_VERSION} ${MATTERMOST_EDITION} dist"

if [ ! -d "${MATTERMOST_PATH}" ]; then
  fetch_mattermost_dist "${MATTERMOST_VERSION}" "${TMP_PATH}" "${MATTERMOST_EDITION}" | indent
  mv "${TMP_PATH}/mattermost" "${MATTERMOST_PATH}"
else
  warn "Mattermost already installed"
  if [[ -f "${ENV_DIR}/MATTERMOST_MIGRATION" ]]; then
    MATTERMOST_MIGRATION=$(cat "$ENV_DIR/MATTERMOST_MIGRATION")
  else
    MATTERMOST_MIGRATION=0
  fi
  if [ $MATTERMOST_MIGRATION == 1 ]; then
    info "Mattermost migration into ${MATTERMOST_VERSION}"
    mv "/app/mattermost" "${TMP_PATH}/mattermost-backup"
    fetch_mattermost_dist "${MATTERMOST_VERSION}" "${TMP_PATH}" | indent
    mv "${TMP_PATH}/mattermost-${MATTERMOST_VERSION}" "${MATTERMOST_PATH}"
  fi
fi
finished

if [[ -z "${MATTERMOST_EDITION}" ]]; then
  MATTERMOST_EDITION_LABEL="enterprise"
else
  MATTERMOST_EDITION_LABEL="team" # default is enterprise (empty) and otherwise team
fi

info "Using mattermost version: ${MATTERMOST_VERSION} edition: ${MATTERMOST_EDITION_LABEL}" | indent
finished

step "Cleaning up tmp files"
rm -rf "${TMP_PATH}"

finished
